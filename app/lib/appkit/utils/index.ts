/**
 * Reown AppKit - Business Logic Utilities Index
 * Central export point for all AppKit business logic
 */

// Type exports
export type {
  NetworkNamespace,
  ConnectionStatus,
  ModalView,
  WalletType,
  ThemeMode,
  AppKitAccount,
  AllAccounts,
  EmbeddedWalletInfo,
  WalletInfo,
  NetworkInfo,
  BalanceInfo,
  ModalState,
  AppKitEvent,
  EventCallback,
  OpenModalOptions,
  SwapArguments,
  ConnectOptions,
  DisconnectOptions,
  SwitchNetworkOptions,
  ConnectionData,
  Connections,
  ThemeConfig,
  ThemeVariables,
  PaymentOptions,
  ExchangeInfo,
  PaymentStatus,
  PaymentResult,
  ExchangeBuyStatus,
  EmailUpdateResult,
  SIWXConfig,
  ProviderType,
  Provider,
  SolanaConnection,
  TransactionOptions,
  SendTokenOptions,
  SwapOptions,
  OnRampOptions,
} from './types';

// Error exports
export {
  AppKitError,
  NetworkNotSupportedError,
  WalletNotConnectedError,
  TransactionRejectedError,
} from './types';

// Constant exports
export {
  CHAIN_IDS,
  CHAIN_NAMES,
  EXPLORER_URLS,
} from './types';

// Account utilities
export {
  formatAddress,
  isValidEthereumAddress,
  isValidSolanaAddress,
  isValidBitcoinAddress,
  isValidAddress,
  parseCAIP10,
  buildCAIP10,
  isConnected,
  isConnecting,
  isDisconnected,
  getAccountDisplayName,
  getNamespaceFromCAIP,
  getChainIdFromCAIP,
  getAddressFromCAIP,
  isSameAccount,
  isOnNetwork,
  isEVMAccount,
  isSolanaAccount,
  isBitcoinAccount,
  getAccountSummary,
  isValidAccount,
  createAccount,
  serializeAccount,
  deserializeAccount,
  getAccountExplorerUrl,
  isChecksumAddress,
  toChecksumAddress,
  truncateAddress,
  getAddressCopyText,
  getAddressQRData,
  parseAddressFromQR,
  addressesEqual,
  estimateAccountAge,
  needsAccountUpdate,
  migrateAccount,
} from './account';

// Network utilities
export {
  getChainName,
  getExplorerUrl,
  isTestnet,
  isMainnet,
  getNamespace,
  isEVMChain,
  isSolanaChain,
  isBitcoinChain,
  chainIdToHex,
  hexToChainId,
  parseCAIP2,
  buildCAIP2,
  getTransactionUrl,
  getAddressUrl,
  getBlockUrl,
  getTokenUrl,
  isValidChainId,
  getNetworkCurrency,
  getNetworkIconUrl,
  isSameChain,
  needsNetworkSwitch,
  getRPCUrl,
  isValidNetwork,
  createNetworkInfo,
  getPopularEVMChains,
  getChainsByNamespace,
  formatChainId,
  getChainEnvironment,
  supportsSmartContracts,
  supportsTokens,
  supportsNFTs,
  getChainLayer,
  getNetworkSummary,
  areChainsCompatible,
  sortChainsByPopularity,
  filterChains,
} from './network';

// Wallet utilities
export {
  getWalletDisplayName,
  isWalletInstalled,
  getWalletDownloadUrl,
  isInjectedWallet,
  isEmbeddedWallet,
  isWalletConnectWallet,
  getWalletIcon,
  formatWalletName,
  supportsNetwork,
  getWalletType,
  sortWalletsByPriority,
  filterWalletsByType,
  getInstalledWallets,
  getRecommendedWallets,
} from './wallet';

// Balance utilities
export {
  formatWeiToEther,
  formatLamportsToSol,
  formatSatoshisToBtc,
  formatTokenAmount,
  parseEtherToWei,
  parseSolToLamports,
  parseBtcToSatoshis,
  formatBalance,
  formatBalanceWithUSD,
  formatCompact,
  formatUSD,
  calculateUSDValue,
  hasSufficientBalance,
  isZeroBalance,
  formatPercentage,
  calculatePercentageChange,
  formatBalanceSmartPrecision,
  isValidAmount,
  parseAmount,
  truncateDecimals,
  formatBalanceForInput,
  calculateGasCost,
  calculateTotalCost,
  exceedsBalanceWithGas,
  getMaxSendableAmount,
  formatWithSeparators,
  createBalanceInfo,
} from './balance';

// Payment utilities
export {
  validatePaymentOptions,
  formatPaymentAmount,
  calculateExchangeFees,
  calculateNetAmount,
  meetsExchangeMinimum,
  withinExchangeMaximum,
  exchangeSupportsAsset,
  getBestExchange,
  sortExchangesByFees,
  filterExchanges,
  formatExchangeName,
  getExchangeIcon,
  isPaymentCompleted,
  isPaymentFailed,
  isPaymentInProgress,
  getPaymentStatusText,
  getPaymentStatusColor,
  formatPaymentResult,
  getPaymentTransactionUrl,
  estimatePaymentTime,
  createPaymentSummary,
  isValidSessionId,
  buildPaymentUrl,
  parsePaymentUrl,
  shouldPollStatus,
  calculatePollingInterval,
  formatBuyStatus,
  shouldRetryPayment,
  compareExchanges,
} from './payment';

// Event utilities
export {
  eventBus,
  eventHistory,
  isValidEventName,
  createEventData,
  formatEventLog,
  isModalEvent,
  isConnectionEvent,
  isAccountEvent,
  isNetworkEvent,
  isTransactionEvent,
  getEventCategory,
  safeEventListener,
  throttleEventListener,
  debounceEventListener,
  loggedEventListener,
  combineEventListeners,
  filterEventData,
  mapEventData,
  PriorityEventBus,
  getEventStats,
} from './events';

// Theme utilities
export {
  getSystemTheme,
  resolveThemeMode,
  isDarkTheme,
  isLightTheme,
  toggleThemeMode,
  createThemeConfig,
  mergeThemeVariables,
  getMacOS8ThemeVariables,
  getLightThemeVariables,
  getDarkThemeVariables,
  applyThemeVariables,
  removeThemeVariables,
  hexToRgb,
  rgbToHex,
  lightenColor,
  darkenColor,
  getContrastColor,
  isValidHexColor,
  isValidThemeVariable,
  getThemeVariableNames,
  extractThemeVariables,
  serializeThemeConfig,
  deserializeThemeConfig,
  saveThemeConfig,
  loadThemeConfig,
  clearThemeConfig,
  watchSystemTheme,
  getMacOS8Preset,
  getModernLightPreset,
  getModernDarkPreset,
  getAllThemePresets,
  applyThemePreset,
} from './theme';

export type { ThemePreset } from './theme';

// Hook exports
export {
  useEnhancedAccount,
  useEnhancedNetwork,
  useEnhancedAppKit,
  useEnhancedDisconnect,
  useAppKitConnection,
  useAppKitMultichain,
  useEnhancedProvider,
  useAppKitModal,
  useAppKitReady,
} from './hooks';

// Re-export core AppKit hooks for convenience
export {
  useAppKit,
  useAppKitAccount,
  useAppKitNetwork,
  useAppKitState,
  useAppKitBalance,
  useAppKitTheme,
  useAppKitEvents,
  useDisconnect,
  useWalletInfo,
  useAppKitProvider,
} from '@reown/appkit/react';

