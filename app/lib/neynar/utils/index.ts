/**
 * Neynar API - Business Logic Utilities Index
 * Central export point for all Neynar business logic
 * 
 * ⚠️ These are pure TypeScript utilities - no React or Node.js dependencies
 * Safe to use in both client and server environments
 */

// Type exports
export type {
  FarcasterUser,
  Cast,
  CastEmbed,
  Reaction,
  ReactionType,
  Follow,
  Channel,
  Notification,
  NotificationType,
  FeedType,
  FeedOptions,
  Signer,
  CreateCastOptions,
  CastEmbedInput,
  UserSearchOptions,
  CastSearchOptions,
  Frame,
  FrameButton,
  Webhook,
  WebhookSubscription,
  StorageUsage,
  BanStatus,
  NeynarError,
  PaginatedResponse,
  APIResponse,
  RateLimitInfo,
  ValidationResult,
  FID,
  CastHash,
} from './types';

// Error exports
export {
  NeynarAPIError,
  ValidationError,
  RateLimitError,
  NotFoundError,
  UnauthorizedError,
} from './types';

// User utilities
export {
  isValidFID,
  isValidUsername,
  formatUsername,
  parseUsername,
  getUserDisplayName,
  getUserIdentifier,
  buildUserMention,
  hasVerifications,
  getPrimaryVerification,
  isActiveUser,
  formatFollowerCount,
  calculateFollowerRatio,
  hasHighEngagement as hasHighUserEngagement,
  getUserBio,
  getBioMentions,
  formatUserProfile,
  compareByFollowers,
  compareByActivity,
  filterActiveUsers,
  filterVerifiedUsers,
  findUserByFID,
  findUserByUsername,
  isSameUser,
  getUserSummary,
  validateFIDs,
  validateUsernames,
  extractFIDs,
  deduplicateUsers,
  groupUsersByVerification,
  getTopUsers,
  buildProfileURL,
  serializeUser,
  deserializeUser,
} from './user';

// Cast utilities
export {
  MAX_CAST_LENGTH,
  MAX_EMBEDS,
  isValidCastLength,
  isValidCastHash,
  calculateCastLength,
  isCastTooLong,
  truncateCastText,
  extractMentions,
  extractURLs,
  extractHashtags,
  formatCastTimestamp,
  getCastAge,
  isRecentCast,
  isReply,
  isThreadRoot,
  getTotalReactions,
  getEngagementRate,
  hasHighEngagement as hasHighCastEngagement,
  hasUserLiked,
  hasUserRecasted,
  formatReactionCount,
  getCastPreview,
  buildCastURL,
  buildConversationURL,
  validateCreateCastOptions,
  compareByTimestamp,
  compareByEngagement,
  filterByAuthor,
  filterCastsWithEmbeds,
  filterThreadRoots,
  filterReplies,
  groupCastsByThread,
  getThread,
  countThreadReplies,
  findCastByHash,
  getDirectReplies,
  mentionsUser,
  getMentionedFIDs,
  getCastChannel,
  filterByChannel,
  getTrendingCasts,
  deduplicateCasts,
  getThreadDepth,
  getCastStatistics,
  formatCastForDisplay,
  serializeCast,
  deserializeCast,
} from './cast';

// Reaction utilities
export {
  isValidReactionType,
  validateReactionOptions,
  isLike,
  isRecast,
  getReactionLabel,
  getReactionEmoji,
  filterReactionsByType,
  filterReactionsByUser,
  filterReactionsByCast,
  filterReactionsByTimeRange,
  sortReactionsByRecent,
  sortReactionsByOldest,
  getTotalReactionCount,
  getLikeCount,
  getRecastCount,
  getReactionCounts,
  getUniqueReactors,
  getUniqueReactorCount,
  hasUserReacted,
  hasUserLiked as hasUserLikedReaction,
  hasUserRecasted as hasUserRecastedReaction,
  getUserReaction,
  getCastReactionCount,
  getCastLikeCount,
  getCastRecastCount,
  castHasReactions,
  formatReactionCount as formatReactionCountDisplay,
  getReactionSummary,
  getReactionVelocity,
  getMostActiveReactors,
  getEngagementRatio as getReactionEngagementRatio,
} from './reaction';

// Follow utilities
export {
  validateFollowOptions,
  validateUnfollowOptions,
  isFollowing,
  isFollowedBy,
  isMutualFollow,
  getCommonFollowers,
  getCommonFollowing,
  getNonReciprocalFollows,
  getNonReciprocalFollowers,
  getMutualFollows,
  getFollowRatio,
  getMutualFollowPercentage,
  getFollowEngagementScore,
  isInfluencer,
  isHighFollowLowFollower,
  hasBalancedFollows,
  filterByMinFollowers,
  filterByMaxFollowing,
  filterByFollowRatio,
  filterInfluencers,
  sortByFollowerCount,
  sortByFollowingCount,
  sortByFollowRatio,
  formatFollowCount,
  getFollowStatusLabel,
  getFollowSummary,
  getSuggestedFollows,
} from './follow';

// Channel utilities
export {
  isValidChannelId,
  isValidChannelUrl,
  extractChannelId,
  getChannelDisplayName,
  getChannelDescription,
  hasChannelImage,
  getChannelMemberCount,
  isChannelMember,
  isChannelLead,
  getChannelLead,
  filterByMinMembers,
  filterByMembership,
  filterByLeadership,
  sortByMemberCount,
  sortByName as sortChannelsByName,
  sortById as sortChannelsById,
  buildChannelUrl,
  buildChannelApiUrl,
  isCastInChannel,
  filterCastsByChannel,
  groupCastsByChannel,
  getChannelActivityScore,
  isPopularChannel,
  formatChannelMemberCount,
  getChannelSummary,
  getChannelHashtag,
  findChannelById,
  findChannelByUrl,
  getSuggestedChannels,
  deduplicateChannels,
} from './channel';

// Feed utilities
export {
  isValidFeedType,
  validateFeedOptions,
  getFeedTypeLabel,
  requiresAuth,
  filterByContent,
  filterByAuthorFid,
  filterByMinReactions,
  filterWithEmbeds,
  filterTextOnly,
  filterByTimeRange,
  sortByRecent,
  sortByEngagement,
  sortByTrending,
  calculateTrendingScore,
  paginateFeed,
  getTotalPages,
  hasMorePages,
  mergeFeeds,
  interleaveFeeds,
  getFeedStats,
  getMostActiveAuthors,
  getFeedSummary,
} from './feed';

// Notification utilities
export {
  isValidNotificationType,
  getNotificationTypeLabel,
  getNotificationEmoji,
  isRead,
  isUnread,
  filterByType as filterNotificationsByType,
  filterUnread as filterUnreadNotifications,
  filterRead as filterReadNotifications,
  filterByTimeRange as filterNotificationsByTimeRange,
  sortByRecent as sortNotificationsByRecent,
  sortByUnreadFirst,
  groupByType as groupNotificationsByType,
  groupByDate as groupNotificationsByDate,
  getUnreadCount,
  getNotificationCounts,
  hasUnread,
  formatNotificationCount,
  getNotificationSummary,
  getRelativeTime,
  deduplicateNotifications,
} from './notification';

// Signer utilities
export {
  isValidSignerUuid,
  isValidPublicKey,
  isApproved as isSignerApproved,
  isPending as isSignerPending,
  isRevoked as isSignerRevoked,
  getStatusLabel as getSignerStatusLabel,
  filterApproved as filterApprovedSigners,
  filterPending as filterPendingSigners,
  filterRevoked as filterRevokedSigners,
  filterByFid as filterSignersByFid,
  sortByUuid as sortSignersByUuid,
  findByUuid as findSignerByUuid,
  findByPublicKey as findSignerByPublicKey,
  formatPublicKey,
  getSignerSummary,
} from './signer';

// Webhook utilities
export {
  isValidWebhookUrl,
  isValidEventType as isValidWebhookEventType,
  isActive as isWebhookActive,
  isInactive as isWebhookInactive,
  filterActive as filterActiveWebhooks,
  filterInactive as filterInactiveWebhooks,
  filterByEventType as filterWebhooksByEventType,
  getEventTypes as getWebhookEventTypes,
  hasEventType as webhookHasEventType,
  getSubscriptionCount as getWebhookSubscriptionCount,
  sortByName as sortWebhooksByName,
  findById as findWebhookById,
  findByUrl as findWebhookByUrl,
  formatWebhookUrl,
  getWebhookSummary,
  getEventTypeLabel as getWebhookEventTypeLabel,
} from './webhook';

// Storage utilities
export {
  getUsagePercentage as getStorageUsagePercentage,
  getRemainingStorage,
  isNearlyFull as isStorageNearlyFull,
  isFull as isStorageFull,
  getStorageLevel,
  getStorageLevelColor,
  formatStorageSize,
  formatStorageUnits,
  getStorageSummary,
  getStorageUsageStats,
  getStorageHealth,
} from './storage';

// Frame utilities
export {
  isValidFrameUrl,
  isValidAspectRatio,
  isValidButtonAction,
  getFrameVersion,
  getFrameImage,
  hasImage as frameHasImage,
  getButtonCount as getFrameButtonCount,
  hasButtons as frameHasButtons,
  getButton as getFrameButton,
  getButtonTitle,
  getButtonAction,
  isLinkButton,
  isPostButton,
  isTxButton,
  isInteractive as isFrameInteractive,
  hasInput as frameHasInput,
  getInputText as getFrameInputText,
  getFrameSummary,
  formatFrameUrl,
} from './frame';

// Search utilities
export {
  normalizeQuery as normalizeSearchQuery,
  isValidQuery as isValidSearchQuery,
  extractHashtags as extractHashtagsFromQuery,
  extractMentions as extractMentionsFromQuery,
  getTextMatchScore,
  getUserRelevanceScore,
  getCastRelevanceScore,
  getChannelRelevanceScore,
  filterUsersByQuery,
  filterCastsByQuery,
  filterChannelsByQuery,
  sortUsersByRelevance,
  sortCastsByRelevance,
  sortChannelsByRelevance,
  searchUsers,
  searchCasts,
  searchChannels,
  highlightMatches,
} from './search';

